/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUM 1
#define NAV 2
#define FUN 3

/ {
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <NUM NAV>;
    //         then-layer = <FUN>;
    //     };
    // };
    // behaviors {
    //     bspc_del: backspace_delete {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "BACKSPACE_DELETE";
    //         #binding-cells = <0>;
    //         bindings = <&kp BACKSPACE>, <&kp DELETE>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //         keep-mods = <(MOD_RSFT)>;
    //     };
    //     smart_shft: smart_shift {
    //         compatible = "zmk,behavior-mod-morph";
    //         label = "SMART_SHIFT";
    //         #binding-cells = <0>;
    //         bindings = <&sk LSHFT>, <&caps_word>;
    //         mods = <(MOD_LSFT)>;
    //     };
    // };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
//             | GUI | NUM | SFT |   | SPC | NAV  | ENT |
                        bindings = <
   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P   
   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI
   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH
        &kp LGUI &sk NUM &kp LSHFT &kp SPACE &sk NAV &kp BSPC
                        >;
                };
//                 num_layer {
// // -----------------------------------------------------------------------------------------
// // |  1  |  2  |  3  |  4  |  5  |   |  *  |  7  |  8  |  9  |  0  |
// // | BT1 | BT2 | BT3 | BT4 |  ~  |   |  |  |  4  |  5  |  6  |     |
// // |     |     |     |     |  `  |   |  \  |  1  |  2  |  3  |     |
// //             | GUI |     | SPC |   |  0  |     |     |
//                         bindings = <
//    &kp EXCL  &kp AT   &kp HASH &kp DLLR &kp PRCNT   &kp STAR &kp N7   &kp N8 &kp N9 &kp MINUS
//    &kp CARET &kp LBRC &kp LBKT &kp LPAR &kp TILDE   &kp PIPE &kp N4   &kp N5 &kp N6 &kp PLUS
//    &kp AMPS  &kp RBRC &kp RBKT &kp RPAR &kp GRAVE   &kp BSLH &kp N1   &kp N2 &kp N3 &kp EQUAL
//                       &trans   &trans   &trans      &kp N0   &trans   &trans
//                         >;
//                 };
// 
//                 nav_layer {
// // -----------------------------------------------------------------------------------------
// // |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// // |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |
// // |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |
// //             | GUI |     | SPC |   | ENT |     | ALT |
//                         bindings = <
//    &kp ESC   &kp K_MUTE &kp K_VOL_DN &kp K_VOL_UP &kp TAB   &trans   &kp END  &kp HOME &trans    &kp BSPC
//    &sk LSHFT &sk LCTRL  &sk LALT     &sk LGUI     &trans    &kp LEFT &kp DOWN &kp UP   &kp RIGHT &kp DEL
//    &trans    &kp K_PREV &kp K_PP     &kp K_NEXT   &trans    &trans   &kp RET  &trans   &trans    &trans
//                         &trans       &trans       &trans    &trans   &trans   &kp RALT
//                         >;
//                 };
//                 
//                 fun_layer {
// // -----------------------------------------------------------------------------------------
// // |     |     |     |     | OUT |   |     |  &  |  *  |  (  |  )  |
// // | BT0 | BT1 | BT2 | BT3 | BT4 |   |     |  =  |  [  |  ]  |  \  |
// // |     |     |BTCLR|     |     |   |     |  +  |  {  |  }  | "|" |
// //             |     |     |     |   |     |     |     |
//                         bindings = <
//    &trans       &trans       &trans       &trans       &out OUT_TOG      &trans &kp F7 &kp F8 &kp F9 &kp F10
//    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &trans &kp F4 &kp F5 &kp F6 &kp F11
//    &trans       &trans       &bt BT_CLR   &trans       &trans            &trans &kp F1 &kp F2 &kp F3 &kp F12
//                              &trans       &trans       &trans            &trans &trans &trans
//                         >;
//                 };
        };
};
